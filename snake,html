<!DOCTYPE html>
<html>
<head>
  <title>Snake Game</title>
  <style>
    body { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; margin: 0; background: #f0f0f0; }
    canvas { border: 2px solid black; }
    #restart { margin-top: 10px; padding: 10px; font-size: 16px; cursor: pointer; }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="400" height="400"></canvas>
  <button id="restart" style="display: none;">Restart Game</button>
  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const restartButton = document.getElementById('restart');
    const gridSize = 20;
    const tileCount = canvas.width / gridSize;

    let snake = [
      { x: 10, y: 10 }
    ];
    let food = { x: Math.floor(Math.random() * tileCount), y: Math.floor(Math.random() * tileCount) };
    let dx = 0;
    let dy = 0;
    let gameOver = false;
    let gameLoop;

    function drawGame() {
      if (gameOver) return;

      // Clear canvas
      ctx.fillStyle = '#ddd';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Move snake
      const head = { x: snake[0].x + dx, y: snake[0].y + dy };
      snake.unshift(head);

      // Check if snake eats food
      if (head.x === food.x && head.y === food.y) {
        food = { x: Math.floor(Math.random() * tileCount), y: Math.floor(Math.random() * tileCount) };
      } else {
        snake.pop();
      }

      // Check for collisions
      if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
        endGame();
        return;
      }
      for (let i = 1; i < snake.length; i++) {
        if (head.x === snake[i].x && head.y === snake[i].y) {
          endGame();
          return;
        }
      }

      // Draw food
      ctx.fillStyle = 'red';
      ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);

      // Draw snake
      ctx.fillStyle = 'green';
      snake.forEach(segment => {
        ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 2, gridSize - 2);
      });
    }

    function endGame() {
      gameOver = true;
      clearInterval(gameLoop);
      ctx.fillStyle = 'black';
      ctx.font = '30px Arial';
      ctx.fillText('Game Over', canvas.width / 2 - 70, canvas.height / 2);
      restartButton.style.display = 'block';
    }

    function resetGame() {
      snake = [{ x: 10, y: 10 }];
      food = { x: Math.floor(Math.random() * tileCount), y: Math.floor(Math.random() * tileCount) };
      dx = 0;
      dy = 0;
      gameOver = false;
      restartButton.style.display = 'none';
      gameLoop = setInterval(drawGame, 100);
    }

    document.addEventListener('keydown', e => {
      if (gameOver) return;
      switch (e.key) {
        case 'ArrowUp':
          if (dy === 0) { dx = 0; dy = -1; }
          break;
        case 'ArrowDown':
          if (dy === 0) { dx = 0; dy = 1; }
          break;
        case 'ArrowLeft':
          if (dx === 0) { dx = -1; dy = 0; }
          break;
        case 'ArrowRight':
          if (dx === 0) { dx = 1; dy = 0; }
          break;
      }
    });

    restartButton.addEventListener('click', resetGame);

    // Start game
    resetGame();
  </script>
</body>
</html>
